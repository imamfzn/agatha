openapi: 3.0.0
info:
  title: User Auth and CRUD API
  version: 0.1.0

tags:
  - name: auth
    description: Everything about authentication
  - name: user
    description: Everything about CRUD user

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user credentials and return a JWT token and a refresh token
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "ultraman"
                password:
                  type: string
                  example: "superaman"
              required:
                - username
                - password
      responses:
        "200":
          description: User auth details, a JWT access token and a refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  username:
                    type: string
                    example: "ultraman"
                  role:
                    type: string
                    example: "admin"
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
                  refresh_token:
                    type: string
                    example: "166f740e3e4cabc3b39876c85fbe2621d194fe0f1dfe886b36f03ebef3b9745299d0018ec79b76ee"
        "401":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username or password incorrect"
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via response body
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "166f740e3e4cabc3b39876c85fbe2621d194fe0f1dfe886b36f03ebef3b9745299d0018ec79b76ee"
              required:
                - token
      responses:
        "200":
          description: User details, a JWT access token and a new refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  username:
                    type: string
                    example: "ultraman"
                  role:
                    type: string
                    example: "admin"
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
                  refresh_token:
                    type: string
                    example: "166f740e3e4cabc3b39876c85fbe2621d194fe0f1dfe886b36f03ebef3b9745299d0018ec79b76ee"
        "401":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"

  /auth/revoke-token:
    post:
      tags:
        - auth
      summary: Revoke a refresh token
      description: Only admin can revoke a refresh token
      operationId: revokeToken
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: Restricted to admin users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    auth_id:
                      type: string
                      example: "6eb12e197e06a76ccdefc12a"
                    name:
                      type: string
                      example: "Ultra Man"
                    email:
                      type: string
                      example: "ultraman@rocketmail.com"
                    username:
                      type: string
                      example: "ultraman"
                    role:
                      type: string
                      example: "user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - user
      summary: Create a user
      description: Only admin can create a user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "ultraman"
                password:
                  type: string
                  example: "amanbanget"
                role:
                  type: string
                  example: "admin"
                name:
                  type: string
                  example: "Ultra Man"
                email:
                  type: string
                  example: "ultraman@rocketmail.com"
                address:
                  type: string
                  example: "Jl. Jakarta No. 100"
                phone:
                  type: string
                  example: "087823643336"
              required:
                - username
                - password
                - name
      responses:
        "201":
          description: Details of the created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  auth_id:
                    type: string
                    example: "6eb12e197e06a76ccdefc12a"
                  username:
                    type: string
                    example: "ultraman"
                  role:
                    type: string
                    example: "admin"
                  name:
                    type: string
                    example: "Ultra Man"
                  email:
                    type: string
                    example: "ultraman@rocketmail.com"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/{id}:
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get a single user by id
      description: Admin users can access any user record, basic users are restricted to their own user record.
      operationId: getUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  auth_id:
                    type: string
                    example: "6eb12e197e06a76ccdefc12a"
                  name:
                    type: string
                    example: "Ultra Man"
                  email:
                    type: string
                    example: "ultraman@rocketmail.com"
                  username:
                    type: string
                    example: "ultraman"
                  role:
                    type: string
                    example: "user"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      tags:
        - user
      summary: Update a user detail by id
      description: Only admin can update a user detail. Username, password, and role can't be updated.
      operationId: updateUserById
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Ultra Man"
                email:
                  type: string
                  example: "ultraman@rocketmail.com"
                address:
                  type: string
                  example: "Jl. Jakarta No. 100"
                phone:
                  type: string
                  example: "087823643336"
              required:
                - name
      responses:
        "200":
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  name:
                    type: string
                    example: "Ultra Man"
                  email:
                    type: string
                    example: "ultraman@rocketmail.com"
                  address:
                    type: string
                    example: "Jl. Jakarta No. 100"
                  phone:
                    type: string
                    example: "087823643336"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - user
      summary: Delete a single user by id
      description: Only admin users can remove any user record.
      operationId: deletetUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Acknowledgment message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User has been deleted"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/me:
    get:
      tags:
        - user
      summary: Current user
      description: Get a details about current user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  auth_id:
                    type: string
                    example: "6eb12e197e06a76ccdefc12a"
                  name:
                    type: string
                    example: "Ultra Man"
                  email:
                    type: string
                    example: "ultraman@rocketmail.com"
                  username:
                    type: string
                    example: "ultraman"
                  role:
                    type: string
                    example: "user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"